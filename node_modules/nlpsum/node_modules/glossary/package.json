{
  "name": "glossary",
  "description": "Term extraction module",
  "version": "0.1.1",
  "author": {
    "name": "Heather Arthur",
    "email": "fayearthur@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/harthur/glossary.git"
  },
  "main": "./glossary",
  "dependencies": {
    "natural": ">=0.0.28",
    "pos": "0.1.x",
    "underscore": "1.1.x"
  },
  "keywords": [
    "term extraction",
    "keyword",
    "tag",
    "auto tag"
  ],
  "readme": "# glossary\n\nglossary is a JavaScript module that extracts keywords from text (aka \"term extraction\" or \"auto tagging\"). It takes a string of text and returns an array of terms that are relevant to the content:\n\n```javascript\nvar glossary = require(\"glossary\");\n\nvar keywords = glossary.extract(\"Her cake shop is the best in the business\");\n\nconsole.log(keywords)  // [\"cake\", \"shop\", \"cake shop\", \"business\"]\n```\n\n`glossary` is standalone and uses part-of-speech analysis to extract the relevant terms.\n\n# install\n\nFor [node](http://nodejs.org) with [npm](http://npmjs.org):\n\n```bash\nnpm install glossary\n```\n\n# API\n\n#### blacklisting\n\nUse `blacklist` to remove unwanted terms from any extraction:\n\n```javascript\nvar glossary = require(\"./glossary\")({\n   blacklist: [\"library\", \"script\", \"api\", \"function\"]\n});\n\nvar keywords = glossary.extract(\"JavaScript color conversion library\");\n\nconsole.log(keywords); // [\"color\", \"conversion\"]\n```\n\n#### minimum frequency\n\nUse `minFreq` to limit the terms to only those that occur with a certain frequency:\n\n```javascript\nvar glossary = require(\"./glossary\")({ minFreq: 2 });\n\nvar keywords = glossary.extract(\"Kasey's pears are the best pears in Canada\");\n\nconsole.log(keywords); // [\"pears\"]\n```\n\n#### sub-terms\n\nUse `collapse` to remove terms that are sub-terms of other terms:\n\n```javascript\nvar glossary = require(\"./glossary\")({ collapse: true });\n\nvar keywords = glossary.extract(\"The Middle East crisis is getting worse\");\n\nconsole.log(keywords); // [\"Middle East crisis\"]\n```\n\n#### verbose output\n\nUse `verbose` to also get the count of each term:\n\nIf you don't want terms that are sub-terms of other terms, use `collapse`:\n\n```javascript\nvar glossary = require(\"./glossary\")({ verbose: true });\n\nvar keywords = glossary.extract(\"The pears from the farm are good\");\n\nconsole.log(keywords); // [ { word: 'pears', count: 1 }, { word: 'farm', count: 1 } ]\n```\n\n# propers\n\n`glossary` Uses [jspos](http://code.google.com/p/jspos/) for POS tagging. It's inspired by the python module [topia.termextract](http://pypi.python.org/pypi/topia.termextract/).\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/harthur/glossary/issues"
  },
  "homepage": "https://github.com/harthur/glossary",
  "_id": "glossary@0.1.1",
  "dist": {
    "shasum": "521ed30d71a2942d21a719d47a3c281ee6a97ba4"
  },
  "_from": "glossary@0.1.1",
  "_resolved": "https://registry.npmjs.org/glossary/-/glossary-0.1.1.tgz"
}
